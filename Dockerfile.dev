# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.12.2
FROM python:${PYTHON_VERSION}-slim as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
WORKDIR /usr/src/app

# Chrome dependency Instalation
RUN apt-get update && apt-get install -y \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libwayland-client0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxkbcommon0 \
    libxrandr2 \
    xdg-utils \
    libu2f-udev \
    libvulkan1

RUN apt-get -y update; apt-get -y install curl

 # Chrome instalation 
RUN curl -LO  https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN apt-get install -y ./google-chrome-stable_current_amd64.deb
RUN rm google-chrome-stable_current_amd64.deb
# Check chrome version
RUN echo "Chrome: " && google-chrome --version

# Install unzip utility
RUN apt-get update && apt-get install -y unzip && rm -rf /var/lib/apt/lists/*

ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies
COPY requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    python -m pip install -r requirements.txt

COPY ./init_selenium.py /usr/src/app/init_selenium.py
RUN python init_selenium.py

# Create a directory for the downloaded files
RUN mkdir -p /usr/src/app/downloads && chown -R appuser:appuser /usr/src/app/downloads

# Run the downloadTiles.py script to download the zip files into the downloads directory
COPY ./app/downloadTiles.py /usr/src/app/downloadTiles.py
RUN python downloadTiles.py --output-dir /usr/src/app/downloads

RUN chown -R appuser:appuser /usr/src/app/downloads

USER appuser

# Unzip the downloaded files while preserving folder structure
RUN for dir in downloads/zips/*; do \
        city=$(basename "$dir"); \
        mkdir -p "downloads/pulse_tiles/$city"; \
        echo "downloads/pulse_tiles/$city"; \
        find "$dir" -name "*.zip" -exec unzip -d "downloads/pulse_tiles/$city" {} \;; \
    done

# Copy the source code into the container.
COPY ./app /usr/src/app
COPY ./downloads downloads:

# Expose the port that the application listens on.
EXPOSE 5000

ENV FLASK_APP=app:app
CMD ["flask", "run", "--host=0.0.0.0", "--debug"]